problem:
  statement: |
    As Harry Potter series is over, Harry has no job. Since he wants to make quick money,
    (he wants everything quick!) so he decided to rob banks. He wants to make a calculated risk,
    and grab as much money as possible. But his friends - Hermione and Ron have decided upon
    a tolerable probability P of getting caught. They feel that he is safe enough if the banks
    he robs together give a probability less than P.

    (1 <= Number of banks, amount of money in each bank <= 100)

  inputs:
    - Pi: probability of getting caught at bank i
    - Mi: amount of money in bank i
    - P: maximum tolerable probability threshold

  goal: |
    Maximize the total money Harry can rob while ensuring that the combined probability
    of getting caught stays less than P.


#include <bits/stdc++.h>
using namespace std;

const int MAXN = 105;   // max number of banks
const int MAXM = 10005; // max money sum (n * max money per bank)
double dp[MAXN][MAXM];
bool vis[MAXN][MAXM];

int n;
int bankMoney[MAXN];
double caught[MAXN];
double P;
double eps = 1e-12;

double func(int i, int m) {
    if (m == 0) return 1.0;        // probability of being safe if no money taken
    if (i > n) return 0.0;         // no banks left
    if (vis[i][m]) return dp[i][m];
    vis[i][m] = true;

    // Option 1: skip this bank
    double res = func(i + 1, m);

    // Option 2: take this bank (if money allows)
    if (m >= bankMoney[i]) {
        double temp = func(i + 1, m - bankMoney[i]) * (1.0 - caught[i]);
        res = max(res, temp);
    }

    return dp[i][m] = res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t, cs = 1;
    cin >> t;
    while (t--) {
        memset(vis, 0, sizeof(vis));
        cin >> P >> n;
        int total = 0;
        for (int i = 1; i <= n; i++) {
            cin >> bankMoney[i] >> caught[i];
            total += bankMoney[i];
        }

        int maxMoneyPossible = 0;
        for (int money = 1; money <= total; money++) {
            double probCaught = 1.0 - func(1, money);
            if (probCaught < P + eps)
                maxMoneyPossible = money;
        }

        cout << "Case " << cs++ << ": " << maxMoneyPossible << "\n";
    }
    return 0;
}
